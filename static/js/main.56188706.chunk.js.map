{"version":3,"sources":["Star.js","BeautyStars.js","App.js","serviceWorker.js","index.js"],"names":["Star","selected","activeColor","inactiveColor","size","style","color","fill","display","height","width","transition","xmlns","viewBox","d","BeautyStars","props","maxStars","useState","num","setNum","Array","map","_","index","title","key","onClick","cursor","position","marginRight","App","className","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAEO,SAASA,EAAT,GAKH,IAJFC,EAIC,EAJDA,SAIC,IAHDC,mBAGC,MAHa,UAGb,MAFDC,qBAEC,MAFe,UAEf,MADDC,YACC,MADM,GACN,EACD,OACE,yBACEC,MAAO,CACLC,MAAOL,EAAWC,EAAcC,EAChCI,KAAMN,EAAW,sBAAwB,sBACzCO,QAAS,QACTC,OAAQL,EACRM,MAAON,EACPO,WAAY,iDAEdC,MAAM,6BACNC,QAAQ,aAER,0BACEN,KAAK,eACLO,EAAE,6vCCpBH,SAASC,EAAYC,GAAQ,IAAD,EACRA,EAAjBC,gBADyB,MACd,EADc,IAEXC,mBAAS,GAFE,mBAE1BC,EAF0B,KAErBC,EAFqB,KAIjC,OACE,yBACEf,MAAO,CACLC,MAAO,WACPE,QAAS,SAGVa,MAAMJ,GACJV,KAAK,MACLe,KAAI,SAACC,EAAGC,GAAJ,OACH,yBACEC,MAAK,UAAKD,EAAL,SACLE,IAAKF,EACLG,QAAS,WACPP,EAAOI,IAAUL,GAAO,EAAIK,IAE9BnB,MAAO,CACLuB,OAAQ,UACRC,SAAU,WACVC,YAAaN,IAAUP,EAAW,GAAK,IAGzC,kBAACjB,EAAD,CAAMC,SAAUuB,GAASL,S,MChBtBY,MATf,WACE,OACE,yBAAKC,UAAU,WACb,wBAAI3B,MAAO,CAAE4B,UAAW,SAAU3B,MAAO,SAAzC,gBACA,kBAACS,EAAD,QCIcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56188706.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Star({\n  selected,\n  activeColor = \"#FFED76\",\n  inactiveColor = \"#121621\",\n  size = 36\n}) {\n  return (\n    <svg\n      style={{\n        color: selected ? activeColor : inactiveColor,\n        fill: selected ? \"rgba(0, 0, 0, 0.02)\" : \"rgba(0, 0, 0, 0.04)\",\n        display: \"block\",\n        height: size,\n        width: size,\n        transition: \"color 0.5s ease-in-out, fill 0.5s ease-in-out\"\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 36 34\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M19.6859343,0.861782958 L24.8136328,8.05088572 C25.0669318,8.40601432 25.4299179,8.6717536 25.8489524,8.80883508 L34.592052,11.6690221 C35.6704701,12.021812 36.2532905,13.1657829 35.8938178,14.2241526 C35.8056709,14.4836775 35.6647294,14.7229267 35.4795411,14.9273903 L29.901129,21.0864353 C29.5299163,21.4962859 29.3444371,22.0366367 29.3872912,22.5833831 L30.1116131,31.8245163 C30.1987981,32.9368499 29.3506698,33.9079379 28.2172657,33.993502 C27.9437428,34.0141511 27.6687736,33.9809301 27.4085205,33.8957918 L18.6506147,31.0307612 C18.2281197,30.8925477 17.7713439,30.8925477 17.3488489,31.0307612 L8.59094317,33.8957918 C7.51252508,34.2485817 6.34688429,33.6765963 5.98741159,32.6182265 C5.90066055,32.3628116 5.86681029,32.0929542 5.88785051,31.8245163 L6.61217242,22.5833831 C6.65502653,22.0366367 6.46954737,21.4962859 6.09833466,21.0864353 L0.519922484,14.9273903 C-0.235294755,14.0935658 -0.158766688,12.8167745 0.690852706,12.0755971 C0.899189467,11.8938516 1.14297067,11.7555303 1.40741159,11.6690221 L10.1505113,8.80883508 C10.5695458,8.6717536 10.9325319,8.40601432 11.1858308,8.05088572 L16.3135293,0.861782958 C16.9654141,-0.0521682813 18.2488096,-0.274439442 19.1800736,0.365326425 C19.3769294,0.500563797 19.5481352,0.668586713 19.6859343,0.861782958 Z\"\n      />\n    </svg>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Star } from \"./Star\";\n\nexport function BeautyStars(props) {\n  const { maxStars = 5 } = props;\n  const [num, setNum] = useState(0);\n\n  return (\n    <div\n      style={{\n        color: \" #121621\",\n        display: \"flex\"\n      }}\n    >\n      {Array(maxStars)\n        .fill(null)\n        .map((_, index) => (\n          <div\n            title={`${index} star`}\n            key={index}\n            onClick={() => {\n              setNum(index === num ? -1 : index);\n            }}\n            style={{\n              cursor: \"pointer\",\n              position: \"relative\",\n              marginRight: index !== maxStars ? 16 : 0\n            }}\n          >\n            <Star selected={index <= num} />\n          </div>\n        ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BeautyStars } from \"./BeautyStars\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1 style={{ textAlign: \"center\", color: \"#fff\" }}>Beauty Stars</h1>\n      <BeautyStars />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}